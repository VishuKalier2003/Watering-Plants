/* Alice and Bob want to water n plants in their garden... The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i...
Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full... They water the plants in the following way:
 * Alice waters the plants in order from left to right, starting from the 0th plant... Bob waters the plants in order from right to left, starting from the (n - 1)th plant...
 *  They begin watering the plants simultaneously...
 * It takes the same amount of time to water each plant regardless of how much water it needs...
 * Alice/Bob must water the plant if they have enough in their can to fully water it... Otherwise, they first refill their can (instantaneously) then water the plant...
In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant... If they have the same amount of water, then Alice should water this plant...
Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's
watering cans respectively, return the number of times they have to refill to water all the plants...
* Eg 1 : plants = [2, 2, 3, 3]       capacityA = 5           capacityB = 5        Output = 0 + 1 = 1
* Eg 2 : plants = [2, 2, 3, 3]       capacityA = 3           capacityB = 4        Output = 1 + 1 = 2
* Eg 3 : plants = [5]                capacityA = 10          capacityB = 8        Output = 0 + 0 = 0
 */
import java.util.*;
public class WateringPlants 
{
    public int MinimumRefill(int plants[], int capacityA, int capacityB)
    {
        int i = 0, j = plants.length-1, refillA = 0, refillB = 0;   // variable declaration...
        int currentA = capacityA, currentB = capacityB;
        while(i < j)    // While Alice has not traversed Bob (the plants are not watered)...
        {
            if(currentA < plants[i])    // If Alice is low on water...
            {
                currentA = capacityA;    // Refilling the container...
                refillA++;      // Incrementing the Alice Refill counter...
            }
            currentA = currentA - plants[i];        // Reducing the water content...
            if(currentB < plants[j])      // If Bob is low on water...
            {
                currentB = capacityB;       // Refilling the container...
                refillB++;              // Incrementing the Bob Refill container...
            }
            currentB = currentB - plants[j];     // Reducing the water content...
            j--;     // Bob moving from right to left...
            i++;     // Alice moving from left to right...
        }
        if((currentA < plants[i]) && (i == j))   // If both are on the same plant (the number of plants are odd)...
        {
            if(currentB < plants[i])    // If both of them are short on water...
                refillA++;      // Increment the Alice refill counter...
        }
        return refillA + refillB;      // Returning the sum of Alice and Bob refills...
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int x, capacityI, capacityII;
        System.out.print("Enter number of Plants : ");
        x = sc.nextInt();
        int plants[] = new int[x];
        for(int i = 0; i < plants.length; i++)
        {
            System.out.print("Enter plant 's water capacity : ");
            plants[i] = sc.nextInt();
        }
        System.out.print("Capacity of Alice 's Can : ");
        capacityI = sc.nextInt();
        System.out.print("Capacity of Bob 's Can : ");
        capacityII = sc.nextInt();
        WateringPlants wateringplants = new WateringPlants();     // Object creation...
        int refill = wateringplants.MinimumRefill(plants, capacityI, capacityII);   // Function calling...
        System.out.println("The Refills done by both Alice and Bob : "+refill);
        sc.close();
    }
}


// Time Complexity  - O(n) time...
// Space Complexity - O(1) space...
/* DEDUCTIONS :- 
 * 1. We take the Alice and Bob from separate positions, and start bringing them closer to the center simultaneously...
 * 2. We keep the track a number of refills for both Alice and Bob by separate counter variables...
 */